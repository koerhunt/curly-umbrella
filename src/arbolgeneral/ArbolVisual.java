/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package arbolgeneral;

import java.awt.Color;
import java.awt.Graphics;

/**
 *
 * @author elias
 */
public class ArbolVisual extends javax.swing.JFrame {

    Nodo arbol = null;
    
    int radio = 40;
    /**
     * Creates new form ArbolVisual
     * @param arbol
     */
    public ArbolVisual(Nodo arbol) {
        this.arbol = arbol;
        initComponents();
    }
    
    @Override
     public void paint (Graphics g)
    {
        super.paint(g);
       dibujarNodo(g,this.getWidth(), this.getHeight(), arbol, 1,2); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")  
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 733, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 533, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void dibujarNodo(Graphics g, int width, int height, Nodo nodo, int n,int j) {
        
        if(nodo==null){
        }else{
            //superpadre
            if(nodo.getNodoRaiz()==null){
                g.setColor (Color.DARK_GRAY);
                g.fillOval(width/2, 70*n, radio, radio);
                nodo.x = width/2;
                nodo.y = 70*n;
                g.setColor (Color.white);
                //mostrar dato
                g.drawString(String.valueOf(nodo.getDato()),nodo.x+radio/3, nodo.y+radio/2);
                System.out.println("imprimiendo raiz");
            }else{
                switch(j){
                    case 1:
                        //calcular posicion x, y del nodo
                        nodo.x = nodo.getNodoRaiz().x - (int) (nodo.getNodoRaiz().x/Math.pow(2, n));
                        nodo.y = 70*n;
                        //pintamos el nodo
                        g.setColor (Color.blue);
                        g.fillOval( nodo.x, nodo.y, radio, radio);
                        System.out.println("imprimiendo nodo izq");
                        break;
                    case 2:
                        //calcular posicion x, y del nodo
                        nodo.x = nodo.getNodoRaiz().x;
                        nodo.y = 70*n;
                        //pintamos el nodo
                        g.setColor (Color.green);
                        g.fillOval( nodo.x, nodo.y, radio, radio);
                        System.out.println("imprimiendo nodo cen");
                        break;
                    case 3:
                        //calcular posicion x, y del nodo
                        nodo.x = (int) (nodo.getNodoRaiz().x/Math.pow(2, n))+nodo.getNodoRaiz().x; 
                        nodo.y = 70*n;
                        //pintamos el nodo
                        g.setColor (Color.red);
                        g.fillOval( nodo.x, nodo.y, radio, radio);
                        System.out.println("imprimiendo nodo der");
                        break;
                    default:
                        break;
                }
                
                //cambiamos color a negro`
                g.setColor (Color.black);
                //pintamos la union del nodo con su padre
                g.drawLine(nodo.x+radio/2, nodo.y, nodo.getNodoRaiz().x+radio/2, nodo.getNodoRaiz().y+radio);
                g.setColor (Color.white);
                //mostrar dato
                g.drawString(String.valueOf(nodo.getDato()),nodo.x+radio/3, nodo.y+radio/2);
            }
        }
        
        
        
        if(nodo!=null){
            if(n<=5){
                dibujarNodo(g, width, height, nodo.getNodoIzq(), n+1,1);
                dibujarNodo(g, width, height, nodo.getNodoCen(), n+1,2);
                dibujarNodo(g, width, height, nodo.getNodoDer(), n+1,3);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
